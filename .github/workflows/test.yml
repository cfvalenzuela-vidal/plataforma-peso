name: Ubuntu Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Upgrade pip and pre-cache requirements
        run: |
          python -m pip install --upgrade pip
          pip install --dry-run --ignore-installed -r requirements.txt

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-v4-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-cache-v4-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install JMeter 5.6.3
        run: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.zip
          unzip apache-jmeter-5.6.3.zip
          mv apache-jmeter-5.6.3 jmeter

      - name: Install wget and unzip
        run: sudo apt-get update && sudo apt-get install -y wget unzip

      - name: Install Chrome 125 and Chromedriver 125
        run: |
          # Descargar Chrome
          wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/125.0.6422.141/linux64/chrome-linux64.zip
          unzip -q chrome-linux64.zip
          sudo mv chrome-linux64 /opt/chrome
          sudo ln -sf /opt/chrome/chrome /usr/bin/google-chrome

          # Descargar Chromedriver
          wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/125.0.6422.141/linux64/chromedriver-linux64.zip
          unzip -q chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/chromedriver
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Start API server in background
        run: nohup python3 src/api.py &

      - name: Wait for server to start
        run: sleep 5

      - name: Test connection to Flask
        run: curl http://127.0.0.1:5000/

      - name: Run API tests
        run: pytest tests/test_api.py -v

      - name: Run Usuarios tests
        run: pytest tests/test_usuarios.py -v

      - name: Run JMeter performance test and generate report
        run: |
          ./jmeter/bin/jmeter -n -t tests/Test_rendimiento_plataforma_peso.jmx -l tests/results.jtl -e -o tests/html-report

      - name: Upload JMeter HTML report
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-html-report
          path: tests/html-report

      - name: Run Selenium test_funcionales_selenium
        run: pytest tests/test_funcionales_selenium.py -v

      - name: Run Selenium test_regresion_selenium
        run: pytest tests/test_regresion_selenium.py -v
      
      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          # Descargar y descomprimir Sonar Scanner CLI
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          export PATH="$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin"

          # Ejecutar Sonar Scanner
          sonar-scanner \
            -Dsonar.projectKey=TU_PROYECTO_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

